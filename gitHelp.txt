Before start using git!
There are 3 stages in git.
1. Deleted, non added or modified - when you have files that was changed or deleted or created. Any changes that you can imagine.
2. Index status or stage status - when you add changed files to index or stage status by "git add filename" command
3. Add to git (commit) - when you add staged or index files to git by using git "commit filename"
It's local changes not server!!!
------------------------------------------
After git commit you can upload changes to server by using git push (see more about git push below)

https://git-scm.com/download/win                   ----> download git 

Create folder (folder) and open git bash in this folder

git init                                           ----> initialize git in your directory
git config user.name "Kolpaxidis V. (home PC)"     ----> configure git by adding your name
git config user.email kolpaxidis86@gmail.com       ----> configure git by adding your email

								##### LOCAL WORK #####

					*** Show information ***
git status                                         ----> check file status
git log                                            ----> show commits
git diff index.html                                ----> show changes

					*** Track/untrack files ****
git add                                            ----> add file as tracked (add file to git)
git add .                                          ----> add all file as tracked (add all file to git)
git add file.js                                    ----> add file as tracked by name
git add folder/file.js                             ----> add file as tracked by name in folder
git rm --cached abc.js                             ----> remove abc.js from tracked files (make file untracked)
If you add file to index (by git add) and after that change it git will commit staff only before git add.
Always git add file to add new changes.
					
					*** Delete/Restore files ***
git rm abc.js                                      ----> delete abc.js file and goes to index (or stage status)
git restore --staged abc.js                        ----> restore to prev status (remove abc.js from index)
git restore abc.js                                 ----> restore abc.js file (first you need to remove it from index by git restore --stage abc.js)
git checkout abc.js                                ----> erase changes and restore to last commit
git reset --hard 005d83b2...                       ----> restore to commit with hash 005d83b2... and erase all newest commits

					*** Rename, change folder ***
git mv main.js js/                                 ----> move file from root folder to js folder
git mv js/main.js ./                               ----> move file from js folder to root folder
git mv index.html main.html                        ----> change file name (git mv existingFileName newFileName)
git mv js/main.html ./test.js                      ----> move main.html file from js folder to root folder and rename it to test.js (fatality!!!)

					*** Commit ***
git commit                                         ----> add commit
git commit -m "Test message"                       ----> add commit with message
git checkout 005d83b2aa63846aa272c6b25a1458cc958cb91d -> go to commit with hash 005d83b...

					*** Branch ***
git branch dev                                     ----> create new branch with name dev
git checkout dev                                   ----> change branch to dev (go to branch dev)
git checkout -b dev                                ----> create branch dev and go on it (the same of 2 commands git branch dev AND git checkout dev)
git checkout -b dev 005d83b2...                    ----> create new branch with name dev from commit with hash 005d83b2...
git branch --delete dev || git branch -d dev       ----> delete branch
git branch -a                                      ----> shows all branches and show where we are now
git merge dev                                      ----> merge dev with branch where you are now (now we are in master)



								##### SERVER WORK #####

								

					*** .gitignore file ***
### My template

#ignore folder log
log/

#ignore folder img
img/

#ignore all zip files
*.zip

#ignore products.json in resources folder
resources/products.json

#ignore all files with .pyc, .pyo, .pyd
*.py[cod]